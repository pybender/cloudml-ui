<?xml version="1.0" encoding="UTF-8"?>

<plan xmlns:buildings="http://www.example.org/NewXMLSchema">

    <!--Inputs required for this import handler to run -->
    <inputs>
        <param name="start" type="date" />
        <param name="end" type="date" />
    </inputs>
    <script>
    <![CDATA[def always99(a):
    return 99
    ]]>
    </script>

    <datasources>
        <!--
            Define data sources to be used. Data sources jobid="j-1A1906EQ4CSDX" j-T0ZDIX0LGN8P j-23ZC0FF6VTQS2
        -->
        <db name="sqoop_db_datasource" 
            host="localhost"
            dbname="odw"
            user="postgres"
            password="postgres"
            vendor="postgres" />
        <pig name="pig" jobid="j-3RUN8W208F7S3" amazon_access_token="AKIAJ3WMYTNKB77YZ5KQ" amazon_token_secret="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"/>

    </datasources>

    <import>
        <entity name="application" datasource="pig">
        <sqoop target="dataset" table="cloudmltestresults" datasource="sqoop_db_datasource">
        <![CDATA[DROP TABLE IF EXISTS cloudmltestresults;CREATE TABLE cloudmltestresults AS SELECT qi.*, 'class' || (trunc(random() * 2) + 1)::char hire_outcome 
FROM public.ja_quick_info qi where qi.file_provenance_date >= '2012-12-03'
AND qi.file_provenance_date < '2012-12-04' 
LIMIT(100);
        ]]>
        </sqoop>
            <query>
                <![CDATA[
register 's3n://odesk-match-prod/cloudml/udf/elephant-bird-core-4.4.jar';
register 's3n://odesk-match-prod/cloudml/udf/elephant-bird-pig-4.4.jar';
register 's3n://odesk-match-prod/cloudml/udf/elephant-bird-hadoop-compat-4.4.jar';
register 's3n://odesk-match-prod/cloudml/udf/json-simple-1.1.1.jar';

A = LOAD 's3n://odesk-match-prod/ja_quick_info/2012/12/applied-01.gz' USING com.twitter.elephantbird.pig.load.JsonLoader('-nestedLoad');
B = FOREACH A GENERATE $0#'job_application_id' AS application,$0#'opening_id' AS opening, $0#'employer' AS employer, $0#'contractor' AS contractor;
C = FOREACH B GENERATE application, opening;
STORE C INTO '$output' USING JsonStorage();
  ]]>
            </query>
            <!-- "Convert" fields to datasources -->
            <field name="employer_info" transform="json" column="employer_info"/>
            <field name="contractor_info" transform="json" column="contractor_info"/>
            <field name="application_id" type="integer" column="application"/>
            <field name="opening_id" type="integer" column="opening"/>


            <entity name="employer_info" datasource="employer_info">
                <field name="employer.op_timezone" jsonpath="$.op_timezone" />
                <field name="employer.op_country_tz" jsonpath="$.op_country_tz" />
                <field name="employer.op_tot_jobs_filled" jsonpath="$.op_tot_jobs_filled" />
                <field name="employer.country" jsonpath="$.op_country" />
            </entity>

            <entity name="contractor_info" datasource="contractor_info">
              <field name="contractor.dev_is_looking" jsonpath="$.dev_is_looking" />
              <field name="contractor.dev_is_looking_week" jsonpath="$.dev_is_looking_week" />
              <field name="contractor.dev_active_interviews" jsonpath="$.dev_active_interviews" />
              <field name="contractor.dev_availability" type="integer" jsonpath="$.dev_availability" />
            </entity>
        </entity>
    </import>
</plan>
